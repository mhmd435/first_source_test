// Mocks generated by Mockito 5.3.0 from annotations
// in first_source_test/test/features/feature_price_tracker/presentation/bloc/price_tracker_bloc/price_tracker_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:first_source_test/core/resources/data_state.dart' as _i3;
import 'package:first_source_test/core/usecases/usecase.dart' as _i6;
import 'package:first_source_test/features/feature_price_tracker/domain/repositories/price_tracker_repository.dart'
    as _i2;
import 'package:first_source_test/features/feature_price_tracker/domain/usecases/cancel_symbol_ticks_usecase.dart'
    as _i8;
import 'package:first_source_test/features/feature_price_tracker/domain/usecases/get_all_symbols_usecase.dart'
    as _i4;
import 'package:first_source_test/features/feature_price_tracker/domain/usecases/get_symbol_ticks_usecase.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePriceTrackerRepository_0 extends _i1.SmartFake
    implements _i2.PriceTrackerRepository {
  _FakePriceTrackerRepository_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeDataState_1<T> extends _i1.SmartFake implements _i3.DataState<T> {
  _FakeDataState_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [GetAllSymbolsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllSymbolsUseCase extends _i1.Mock
    implements _i4.GetAllSymbolsUseCase {
  MockGetAllSymbolsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PriceTrackerRepository get priceTrackerRepository =>
      (super.noSuchMethod(Invocation.getter(#priceTrackerRepository),
              returnValue: _FakePriceTrackerRepository_0(
                  this, Invocation.getter(#priceTrackerRepository)))
          as _i2.PriceTrackerRepository);
  @override
  _i5.Future<_i3.DataState<dynamic>> call(_i6.NoParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: _i5.Future<_i3.DataState<dynamic>>.value(
                  _FakeDataState_1<dynamic>(
                      this, Invocation.method(#call, [params]))))
          as _i5.Future<_i3.DataState<dynamic>>);
}

/// A class which mocks [GetSymbolTicksUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetSymbolTicksUseCase extends _i1.Mock
    implements _i7.GetSymbolTicksUseCase {
  MockGetSymbolTicksUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PriceTrackerRepository get priceTrackerRepository =>
      (super.noSuchMethod(Invocation.getter(#priceTrackerRepository),
              returnValue: _FakePriceTrackerRepository_0(
                  this, Invocation.getter(#priceTrackerRepository)))
          as _i2.PriceTrackerRepository);
  @override
  _i5.Future<_i3.DataState<dynamic>> call(String? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: _i5.Future<_i3.DataState<dynamic>>.value(
                  _FakeDataState_1<dynamic>(
                      this, Invocation.method(#call, [params]))))
          as _i5.Future<_i3.DataState<dynamic>>);
}

/// A class which mocks [CancelSymbolTicksUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCancelSymbolTicksUseCase extends _i1.Mock
    implements _i8.CancelSymbolTicksUseCase {
  MockCancelSymbolTicksUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PriceTrackerRepository get priceTrackerRepository =>
      (super.noSuchMethod(Invocation.getter(#priceTrackerRepository),
              returnValue: _FakePriceTrackerRepository_0(
                  this, Invocation.getter(#priceTrackerRepository)))
          as _i2.PriceTrackerRepository);
  @override
  _i5.Future<_i3.DataState<String>> call(String? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: _i5.Future<_i3.DataState<String>>.value(
                  _FakeDataState_1<String>(
                      this, Invocation.method(#call, [params]))))
          as _i5.Future<_i3.DataState<String>>);
}
