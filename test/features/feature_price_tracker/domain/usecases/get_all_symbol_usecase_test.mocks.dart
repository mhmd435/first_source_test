// Mocks generated by Mockito 5.3.0 from annotations
// in first_source_test/test/features/feature_price_tracker/domain/usecases/get_all_symbol_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:first_source_test/core/resources/data_state.dart' as _i2;
import 'package:first_source_test/features/feature_price_tracker/domain/repositories/price_tracker_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDataState_0<T> extends _i1.SmartFake implements _i2.DataState<T> {
  _FakeDataState_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [PriceTrackerRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPriceTrackerRepository extends _i1.Mock
    implements _i3.PriceTrackerRepository {
  MockPriceTrackerRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.DataState<dynamic>> fetchSymbols() =>
      (super.noSuchMethod(Invocation.method(#fetchSymbols, []),
              returnValue: _i4.Future<_i2.DataState<dynamic>>.value(
                  _FakeDataState_0<dynamic>(
                      this, Invocation.method(#fetchSymbols, []))))
          as _i4.Future<_i2.DataState<dynamic>>);
  @override
  _i4.Future<_i2.DataState<dynamic>> fetchSymbolTicks(dynamic symbol) =>
      (super.noSuchMethod(Invocation.method(#fetchSymbolTicks, [symbol]),
              returnValue: _i4.Future<_i2.DataState<dynamic>>.value(
                  _FakeDataState_0<dynamic>(
                      this, Invocation.method(#fetchSymbolTicks, [symbol]))))
          as _i4.Future<_i2.DataState<dynamic>>);
  @override
  _i4.Future<_i2.DataState<String>> cancelSymbolTicks(dynamic id) =>
      (super.noSuchMethod(Invocation.method(#cancelSymbolTicks, [id]),
              returnValue: _i4.Future<_i2.DataState<String>>.value(
                  _FakeDataState_0<String>(
                      this, Invocation.method(#cancelSymbolTicks, [id]))))
          as _i4.Future<_i2.DataState<String>>);
}
